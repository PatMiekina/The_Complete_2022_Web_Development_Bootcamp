Update: Solution for lecture 250

According to the documentation

https://mailchimp.com/developer/api/marketing/lists/batch-subscribe-or-unsubscribe/

in the successfull case the response of the mailchimp.lists.addListMember() call will be an object representing the new subscriber that was added to your list. Unfortunately the value of the response.status attribute will refer to your subscriber's current status (e.g. "subscribed", "unsubscribed", "cleaned", "pending", or "transactional") and not to a HTTP status code.

If there is an error generated by the Mailchimp API, then - and only then - the response.status attribute will be a proper HTTP status code (e.g. 404). So you could check if the response.status is a number and render a failure page if this is the case.

There is one problem though: If you intentionally try to generate an error by passing a wrong API-key for example, you will get no response at all. So every conditional statement checking on response.status will result in an error. One basic solution to reproduce this lecture is to simply wrap the API call in a try {} block.

If everything works well, the  try {} block will be executed completely and the success page will be send back. If any kind of error occurs the catch {}  block will be executed and a failure page will be send back respectively.



const express = require('express');
const bodyParser = require('body-parser');
const mailchimp = require('@mailchimp/mailchimp_marketing');

const app = express();
app.use(bodyParser.urlencoded({extended: true}))
app.use(express.static("public"));

mailchimp.setConfig({
  apiKey: "YOUR API-KEY",
  server: "YOUR SERVER PREFIX e.g. us7"
});

app.get("/", function(req, res){
  res.sendFile(__dirname + "/signup.html");
})

app.post("/", function(req, res){
  console.log(req.body.firstName);
  console.log(req.body.lastName);
  console.log(req.body.email);

  const listId = "YOUR LIST-ID";
  const subscribingUser = {
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      email: req.body.email
  };

  async function run() {
      try {
          const response = await mailchimp.lists.addListMember(listId, {
            email_address: subscribingUser.email,
            status: "subscribed",
            merge_fields: {
              FNAME: subscribingUser.firstName,
              LNAME: subscribingUser.lastName
            }
          });

          console.log(
            `Successfully added contact as an audience member. The contact's id is ${response.id}.`
          );

          res.sendFile(__dirname + "/success.html");
      } catch (e) {
          res.sendFile(__dirname + "/failure.html");
      }
  }

  run();
})

app.post("/failure", function(req, res) {
  res.redirect("/");
})

app.listen(3000, function () {
  console.log("Server is running on port 3000")
});
